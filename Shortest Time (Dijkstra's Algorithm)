import java.util.*;
class Graph {
    private int V; 
    private List<List<Node>> adj; 
    class Node implements Comparable<Node> {
        int vertex;
        int weight;
        Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
        public int compareTo(Node other) {
            return Integer.compare(this.weight, other.weight);
        }
    }
    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }
    void addEdge(int u, int v, int weight) {
        adj.get(u).add(new Node(v, weight));
        adj.get(v).add(new Node(u, weight)); // Remove this line if graph is directed
    }
    int shortestPath(int src, int dest) {
        PriorityQueue<Node> pq = new PriorityQueue<>();
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        pq.add(new Node(src, 0));
        dist[src] = 0;
        while (!pq.isEmpty()) {
            int u = pq.poll().vertex;
            for (Node neighbor : adj.get(u)) {
                int v = neighbor.vertex;
                int weight = neighbor.weight;
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }

        return dist[dest];
    }
}
public class ShortestTime {
    public static void main(String[] args) {
        int V = 7; // Number of vertices
        Graph graph = new Graph(V);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 2, 5);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 7);
        graph.addEdge(2, 4, 3);
        graph.addEdge(3, 4, 2);
        graph.addEdge(4, 5, 1);
        graph.addEdge(4, 6, 4);
        graph.addEdge(5, 6, 3);
        int src = 0; // Source node
        int dest = 6; // Destination node
        int shortestTime = graph.shortestPath(src, dest);
        System.out.println("Shortest time from node " + src + " to node " + dest + " is: " + shortestTime);
    }
}
